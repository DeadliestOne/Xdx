import os
from pytgcalls import PyTgCalls
from pytgcalls.types import Update
from pytgcalls.types.input_stream import InputAudioStream
from pyrogram import Client, filters
from pyrogram.types import Message
from youtube_dl import YoutubeDL

API_ID = os.environ.get("26416419")
API_HASH = os.environ.get("c109c77f5823c847b1aeb7fbd4990cc4")
BOT_TOKEN = os.environ.get("7221901910:AAEeB2G1Zqbz6fm79ZUq7E_DF73ukTFuyiE")
CHAT_ID = os.environ.get("-1002342618765")

app = Client("music_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)
call_py = PyTgCalls(app)

@app.on_message(filters.command("play") & filters.chat(CHAT_ID))
async def play_song(_, message: Message):
    if len(message.command) < 2:
        await message.reply_text("Please provide a YouTube URL or song name.")
        return

    query = " ".join(message.command[1:])
    ydl_opts = {"format": "bestaudio/best"}
    
    try:
        results = YoutubeDL(ydl_opts).extract_info(f"ytsearch:{query}", download=False)['entries']
    except Exception as e:
        await message.reply_text(f"Error: {str(e)}")
        return

    if not results:
        await message.reply_text("No results found.")
        return

    url = results[0]['webpage_url']
    title = results[0]['title']

    ydl_opts = {
        "format": "bestaudio/best",
        "outtmpl": "downloads/%(title)s.%(ext)s",
    }

    with YoutubeDL(ydl_opts) as ydl:
        info_dict = ydl.extract_info(url, download=True)
        audio_file = ydl.prepare_filename(info_dict)

    await call_py.join_group_call(
        CHAT_ID,
        InputAudioStream(
            audio_file,
        ),
    )

    await message.reply_text(f"Playing: {title}")

@app.on_message(filters.command("stop") & filters.chat(CHAT_ID))
async def stop_playing(_, message: Message):
    await call_py.leave_group_call(CHAT_ID)
    await message.reply_text("Stopped playing and left the voice chat.")

@call_py.on_stream_end()
async def stream_end_handler(_, update: Update):
    await call_py.leave_group_call(CHAT_ID)

app.run()
